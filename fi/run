#!/bin/sh -e

fi=`dirname $0`
. $fi/env
nixfile=$fi

if [[ `hostname -s` = pcn* ]] ; then
	# popeye
	nixfile="$nixfile --argstr target skylake --argstr cudaarch 70"
fi

traceSpecs() {
	nix-instantiate --eval -A "$1" $nixfile |& sed 's/^trace: //'
}

release() {
	profile=$1 ; shift
	nix-env -p $NIX_STATE_DIR/profiles/system/$profile -i -r -f $nixfile "$@"
}

if [[ $# -eq 0 ]] ; then
	cmd=help
else
	cmd="$1"
	shift
fi
case "$cmd" in
	(build)
		exec nix-build --show-trace "$@" -A mods $nixfile
		;;
	(spec)
		if [[ $# -eq 0 ]] ; then
			traceSpecs traceModSpecs
		else
			for p in "$@" ; do
				traceSpecs "traceSpecs.$p"
			done
		fi
		;;
	(gc)
		exec nix-store --gc
		;;
	(release)
		case "$1" in
			(nix)
				release nix -A nixpkgs.nix -A nixpkgs.git
				;;
			(modules|nixpack|"")
				nix-build -o singularity -A pkgs.singularity $nixfile
				for fix in singularity/bin/spack_perms_fix.sh ; do
					sudo $fix || echo "YOU MUST RUN: sudo `realpath $fix`"
				done
				release nixpack -A mods
				;;
			(jupyter)
				release nixpack-jupyter -A jupyter
				;;
			(*)
				echo "Unknown release"
				;;
		esac
		;;
	(spack)
		nix-build -o spackBin -A spackBin $nixfile
		exec ./spackBin "$@"
		;;
	(*)
		if [[ $cmd != help ]] ; then
			echo "Unknown command"
		fi

		cat <<EOF
Usage: $0 COMMAND

Commands:
  
  build        Build modules into result.  Takes the same arguments as
               nix-build (-jN, --cores M, -K, ...).
  spec [PKG]   Print the spec tree for a specific package or all modules,
	       along with the total number of unique packages.
  gc           Cleanup any unreferenced nix stores (nix-store --gc).
  release      Publish a release profile for...
    modules    nixpack lmod modules (default)
    jupyter    jupyterhub server environment
    nix        nix build environment
  spack ...    Run a spack command in the nixpack environment (things like list
	       and info work, but those managing packages will not)

EOF
esac
